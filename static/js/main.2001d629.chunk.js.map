{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","originalColorMap","svgRef","useRef","useState","setIsLoaded","colors","setColors","useStyles","createUseStyles","map","styles","Object","keys","forEach","key","index","fill","startsWith","console","log","generateColorStyle","StyledContainer","children","classes","className","innerRef","src","process","onLoad","type","value","onChange","e","target","onColorChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,I,4BCqGAA,MA7Ff,WACE,IAAMC,EAAmB,CACvB,UAAW,UACX,UAAW,UACX,UAAW,UACX,UAAW,UACX,iBAAkB,UAClB,cAAe,WAIXC,EAASC,iBAAO,GACtB,EAAgCC,oBAAS,GAAzC,mBAAiBC,GAAjB,WACA,EAA4BD,mBAAS,eAAIH,IAAzC,mBAAOK,EAAP,KAAeC,EAAf,KAoCMC,EAAYC,YA1BlB,WACE,IAAIC,EAAM,GACNC,EAASD,EAAG,OAAa,GAiB7B,OAhBAE,OAAOC,KAAKP,GAAQQ,SAAQ,SAACC,EAAKC,GACrB,eAAPD,EACFJ,EAAO,iDAAmD,CACxDM,KAAMX,EAAOS,IAENA,EAAIG,WAAW,WACxBP,EAAO,MAAD,OAAOI,EAAP,uBAAkC,CACtCE,KAAMX,EAAOS,QAKnBI,QAAQC,IAAIV,GAILA,EAOyBW,IAE5BC,EAAkB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAClBC,EAAUhB,IAChB,OACE,qBAAKiB,UAAWD,EAAQb,OAAxB,SACKY,KAKT,OACE,sBAAKE,UAAU,MAAf,UACI,cAACH,EAAD,UACE,cAAC,IAAD,CACEI,SAAUxB,EACVyB,IAAG,UAAKC,eAAL,0BACHC,OAnDV,WACExB,GAAY,QAqDR,sBAAKoB,UAAU,YAAf,UACI,sBAAKA,UAAU,SAAf,UACE,wCAEEb,OAAOC,KAAKP,GAAQI,KAAI,SAACK,EAAIC,GAC3B,OACE,wBAAOS,UAAU,QAAjB,UACKV,EACD,uBAAOe,KAAK,QAAQC,MAAOzB,EAAOS,GAAMiB,SAAU,SAACC,GAAD,OA1DxE,SAAuBA,EAAGlB,GACxBR,EAAU,2BAAID,GAAL,kBAAcS,EAAMkB,EAAEC,OAAOH,SAyDqCI,CAAcF,EAAElB,QAF7CC,MAOpC,wBAAQoB,QArCpB,WACE7B,EAAU,eAAIN,KAoCJ,6BAEF,qBAAKwB,UAAU,wBChFZY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2001d629.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.scss';\nimport SVG from 'react-inlinesvg';\nimport { useRef, useState } from 'react';\nimport {createUseStyles} from 'react-jss'\n\n\n\nfunction App() {\n  const originalColorMap = {\n    'color-1': \"#FFB000\",\n    'color-2': \"#785EF0\",\n    'color-3': \"#648FFF\",\n    'color-4': \"#DC267F\",\n    'color-inactive': \"#767676\",\n    'color-focus': \"#FE6100\"\n  }\n\n\n  const svgRef = useRef(0);\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [colors, setColors] = useState({...originalColorMap})\n\n  function onSvgLoad() {\n    setIsLoaded(true)\n    }\n\n  function onColorChange(e, key) {\n    setColors({...colors, [key]: e.target.value})\n  }\n\n  function generateColorStyle() {\n    let map = {}\n    let styles = map['styles'] = {}\n    Object.keys(colors).forEach((key, index)=>{\n      if (key == \"color-focus\") {\n        styles['& [data-layer=\"root\"]:focus [data-layer=\"bg\"]'] = {\n          fill: colors[key]\n        }\n      } else if (key.startsWith('color')) {\n        styles[`& .${key} [data-layer='bg']`] = {\n          fill: colors[key]\n        }\n      }\n    })\n\n    console.log(map)\n\n\n\n    return map\n  }\n\n  function resetColorMap() {\n    setColors({...originalColorMap})\n  }\n\n  const useStyles = createUseStyles(generateColorStyle())\n\n  const StyledContainer = ({children}) => {\n    const classes = useStyles()\n    return (\n      <div className={classes.styles}>\n          {children}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n        <StyledContainer>\n          <SVG \n            innerRef={svgRef}\n            src={`${process.env.PUBLIC_URL}/assets/focus-test.svg`}\n            onLoad={onSvgLoad}\n          ></SVG>\n        </StyledContainer>\n        <div className=\"container\">\n            <div className=\"colors\">\n              <h3>Colors</h3>\n              {\n                Object.keys(colors).map((key,index)=>{\n                  return (\n                    <label className=\"color\" key={index}>\n                        {key}\n                        <input type=\"color\" value={colors[key]} onChange={(e)=>onColorChange(e,key)}></input>\n                    </label>\n                  )\n                })\n              }\n              <button onClick={resetColorMap}>Reset Colors</button>\n            </div>\n            <div className=\"disabilities\">\n\n\n            </div>\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}