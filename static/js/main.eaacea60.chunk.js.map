{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","originalColorMap","originalStrokeMap","originalFontMap","availableFonts","svgRef","useRef","useState","isLoaded","setIsLoaded","colors","setColors","strokes","setStrokes","fonts","setFonts","onFontChange","e","key","target","value","useStyles","createUseStyles","map","Object","keys","forEach","index","fill","startsWith","generateColorStyle","strokeWidth","generateStrokeStyle","fontSize","fontFamily","letterSpacing","font","generateFontStyle","StyledContainer","children","classes","className","useEffect","interval","setInterval","tempStyles","Array","from","document","querySelectorAll","i","length","remove","clearInterval","innerRef","src","process","onLoad","type","defaultValue","onChange","onColorChange","onClick","step","onStrokeChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eaacea60.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.scss';\r\nimport SVG from 'react-inlinesvg';\r\nimport { useRef, useState, useEffect } from 'react';\r\nimport {createUseStyles} from 'react-jss'\r\n\r\n\r\n\r\nfunction App() {\r\n  const originalColorMap = {\r\n    'color-1': \"#FFB000\",\r\n    'color-2': \"#785EF0\",\r\n    'color-3': \"#648FFF\",\r\n    'color-4': \"#DC267F\",\r\n    'color-inactive': \"#767676\",\r\n    'color-focus': \"#FE6100\",\r\n  }\r\n\r\n  const originalStrokeMap = {\r\n    'stroke-width': '8'\r\n  }\r\n\r\n  const originalFontMap = {\r\n    'font-size': 36,\r\n    'font-family': 'Arial',\r\n    'letter-spacing': '0.02'\r\n  }\r\n\r\n  const availableFonts = [\r\n    'sans-serif',\r\n    'serif',\r\n    'monospace',\r\n    'cursive',\r\n    'Atkinson Hyperlegible'\r\n  ]\r\n\r\n  const svgRef = useRef(0);\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const [colors, setColors] = useState({...originalColorMap})\r\n  const [strokes, setStrokes] = useState({...originalStrokeMap})\r\n  const [fonts, setFonts] = useState({...originalFontMap})\r\n\r\n  function onSvgLoad() {\r\n    setIsLoaded(true)\r\n    }\r\n\r\n  function onColorChange(e, key) {\r\n    setColors({...colors, [key]: e.target.value})\r\n  }\r\n\r\n  function onStrokeChange(e, key) {\r\n    setStrokes({...strokes, [key]: e.target.value})\r\n  }\r\n\r\n  function onFontChange(e, key) {\r\n    setFonts({...fonts, [key]: e.target.value})\r\n  }\r\n\r\n  function generateColorStyle() {\r\n    let map = {}\r\n    Object.keys(colors).forEach((key, index)=>{\r\n      // Special Handler For When Color Focus Is Hit\r\n      if (key == \"color-focus\") {\r\n        map['& [data-layer=\"root\"]:focus [data-layer=\"bg\"]'] = {\r\n          fill: colors[key]\r\n        }\r\n      } else if (key == \"color-inactive\") {\r\n        map['& [data-layer-state=\"0\"] [data-layer=\"bg\"]'] = {\r\n          fill: colors[key]\r\n        }\r\n      // Handler For When A Generic Color Is Encountered\r\n      } else if (key.startsWith('color')) {\r\n        map[`& .${key} [data-layer='bg']`] = {\r\n          fill: colors[key]\r\n        }\r\n      }\r\n    })\r\n    return map\r\n  }\r\n\r\n  function generateStrokeStyle() {\r\n    let map = {}\r\n    Object.keys(strokes).forEach((key, index)=>{\r\n      if (key == \"stroke-width\") {\r\n        map[`& [data-layer=\"bg\"]`] = {\r\n          strokeWidth: strokes[key]\r\n        }\r\n      }\r\n    })\r\n    return map\r\n  }\r\n\r\n  function generateFontStyle() {\r\n    let map = {}\r\n    let fontSize = fonts['font-size'];\r\n    let fontFamily = fonts['font-family']\r\n    let letterSpacing = fonts['letter-spacing']\r\n    map['& [data-layer=\"txt\"]'] = {\r\n      font: `bold ${fontSize}px ${fontFamily}`,\r\n      letterSpacing: letterSpacing+'em'\r\n    }\r\n    return map\r\n  }\r\n  \r\n  function resetColorMap() {\r\n    setColors({...originalColorMap})\r\n  }\r\n\r\n  function resetStrokeMap() {\r\n    setStrokes({...originalStrokeMap})\r\n  }\r\n\r\n  function resetFontMap() {\r\n    setFonts({...originalFontMap})\r\n  }\r\n\r\n  const useStyles = createUseStyles({\r\n    colors:  generateColorStyle(),\r\n    strokes: generateStrokeStyle(),\r\n    fonts: generateFontStyle()\r\n  })\r\n\r\n  const StyledContainer = ({children}) => {\r\n    const classes = useStyles()\r\n    return (\r\n      <div className={`${classes.colors} ${classes.strokes} ${classes.fonts}`}>\r\n          {children}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Clean Up Function\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      let tempStyles = Array.from(document.querySelectorAll(\"[data-meta='Unthemed']\"))\r\n      let i=0;\r\n      while (i <(tempStyles.length-1)) {\r\n        tempStyles[i].remove()\r\n        i++\r\n      }\r\n    }, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <h1 className=\"title\">Adaptive SVG</h1>\r\n        <StyledContainer>\r\n          <SVG \r\n            innerRef={svgRef}\r\n            src={`${process.env.PUBLIC_URL}/assets/focus-test.svg`}\r\n            onLoad={onSvgLoad}\r\n          ></SVG>\r\n        </StyledContainer>\r\n        { isLoaded &&\r\n        <div className=\"container\">\r\n          <div className=\"colors\">\r\n            <h3>Color</h3>\r\n            {\r\n              Object.keys(colors).map((key,index)=>{\r\n                if (key.startsWith('color')) {\r\n                  return (\r\n                    <label key={index}>\r\n                        {key}\r\n                        <input type=\"color\" defaultValue={colors[key]} onChange={(e)=>onColorChange(e,key)}></input>\r\n                    </label>\r\n                  )\r\n                }\r\n              })\r\n            }\r\n            <button onClick={resetColorMap}>Reset Colors</button>\r\n          </div>\r\n          <div className=\"stroke\">\r\n            <h3>Stroke</h3>\r\n            {\r\n              Object.keys(strokes).map((key,index)=>{\r\n                if (key==\"stroke-width\") {\r\n                  return (\r\n                    <label key={index}>\r\n                        {key}\r\n                        <input type=\"number\" step=\"2\" value={strokes[key]} onChange={(e)=>onStrokeChange(e,key)}></input>\r\n                    </label>\r\n                  )\r\n                }\r\n              })\r\n            }\r\n            <button onClick={resetStrokeMap}>Reset Stroke</button>\r\n          </div>\r\n          <div className=\"fonts\">\r\n            <h3>Font</h3>\r\n            {\r\n              Object.keys(fonts).map((key,index)=>{\r\n                if (key==\"font-size\") {\r\n                  return (\r\n                    <label key={index}>\r\n                        {key}\r\n                        <input type=\"number\" value={fonts[key]} onChange={(e)=>onFontChange(e,key)}></input>\r\n                    </label>\r\n                  )\r\n                } else if (key==\"font-family\") {\r\n                  return (\r\n                    <label key={index}>\r\n                    {key}\r\n                      <select onChange={(e)=>onFontChange(e, key)}>\r\n                          {\r\n                            availableFonts.map((font)=>{\r\n                                return (<option>{font}</option>)\r\n                            })\r\n                          }\r\n                      </select>\r\n                    </label>\r\n                  )\r\n                } else if (key==\"letter-spacing\") {\r\n                  return (\r\n                    <label key={index}>\r\n                        {key + \" (em)\"}\r\n                        <input type=\"number\" step=\"0.01\" value={fonts[key]} onChange={(e)=>onFontChange(e,key)}></input>\r\n                    </label>\r\n                  )\r\n                }\r\n              })\r\n            }\r\n            <button onClick={resetFontMap}>Reset Fonts</button>\r\n          </div>\r\n        </div>\r\n        }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}