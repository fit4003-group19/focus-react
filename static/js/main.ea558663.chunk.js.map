{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","originalColorMap","originalStrokeMap","originalFontMap","availableFonts","svgRef","useRef","useState","isLoaded","setIsLoaded","colors","setColors","strokes","setStrokes","fonts","setFonts","onFontChange","e","key","target","value","useStyles","createUseStyles","map","Object","keys","forEach","index","fill","startsWith","generateColorStyle","strokeWidth","generateStrokeStyle","fontSize","fontFamily","font","generateFontStyle","StyledContainer","children","classes","className","useEffect","interval","setInterval","tempStyles","Array","from","document","querySelectorAll","i","length","remove","clearInterval","innerRef","src","process","onLoad","type","onChange","onColorChange","onClick","step","onStrokeChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ea558663.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.scss';\nimport SVG from 'react-inlinesvg';\nimport { useRef, useState, useEffect } from 'react';\nimport {createUseStyles} from 'react-jss'\n\n\n\nfunction App() {\n  const originalColorMap = {\n    'color-1': \"#FFB000\",\n    'color-2': \"#785EF0\",\n    'color-3': \"#648FFF\",\n    'color-4': \"#DC267F\",\n    'color-inactive': \"#767676\",\n    'color-focus': \"#FE6100\",\n  }\n\n  const originalStrokeMap = {\n    'stroke-width': '8'\n  }\n\n  const originalFontMap = {\n    'font-size': 36,\n    'font-family': 'Arial'\n  }\n\n  const availableFonts = [\n    'sans-serif',\n    'serif',\n    'monospace',\n    'cursive',\n    'Atkinson Hyperlegible'\n  ]\n\n  const svgRef = useRef(0);\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [colors, setColors] = useState({...originalColorMap})\n  const [strokes, setStrokes] = useState({...originalStrokeMap})\n  const [fonts, setFonts] = useState({...originalFontMap})\n\n  function onSvgLoad() {\n    setIsLoaded(true)\n    }\n\n  function onColorChange(e, key) {\n    setColors({...colors, [key]: e.target.value})\n  }\n\n  function onStrokeChange(e, key) {\n    setStrokes({...strokes, [key]: e.target.value})\n  }\n\n  function onFontChange(e, key) {\n    setFonts({...fonts, [key]: e.target.value})\n  }\n\n  function generateColorStyle() {\n    let map = {}\n    Object.keys(colors).forEach((key, index)=>{\n      // Special Handler For When Color Focus Is Hit\n      if (key == \"color-focus\") {\n        map['& [data-layer=\"root\"]:focus [data-layer=\"bg\"]'] = {\n          fill: colors[key]\n        }\n      // Handler For When A Generic Color Is Encountered\n      } else if (key.startsWith('color')) {\n        map[`& .${key} [data-layer='bg']`] = {\n          fill: colors[key]\n        }\n      }\n    })\n    return map\n  }\n\n  function generateStrokeStyle() {\n    let map = {}\n    Object.keys(strokes).forEach((key, index)=>{\n      if (key == \"stroke-width\") {\n        map[`& [data-layer=\"bg\"]`] = {\n          strokeWidth: strokes[key]\n        }\n      }\n    })\n    return map\n  }\n\n  function generateFontStyle() {\n    let map = {}\n    let fontSize = fonts['font-size'];\n    let fontFamily = fonts['font-family']\n    map['& [data-layer=\"txt\"]'] = {\n      font: `bold ${fontSize}px ${fontFamily}`\n    }\n    return map\n  }\n  \n  function resetColorMap() {\n    setColors({...originalColorMap})\n  }\n\n  function resetStrokeMap() {\n    setStrokes({...originalStrokeMap})\n  }\n\n  function resetFontMap() {\n    setFonts({...originalFontMap})\n  }\n\n  const useStyles = createUseStyles({\n    colors:  generateColorStyle(),\n    strokes: generateStrokeStyle(),\n    fonts: generateFontStyle()\n  })\n\n  const StyledContainer = ({children}) => {\n    const classes = useStyles()\n    return (\n      <div className={`${classes.colors} ${classes.strokes} ${classes.fonts}`}>\n          {children}\n      </div>\n    )\n  }\n\n  // Clean Up Function\n  useEffect(() => {\n    const interval = setInterval(() => {\n      let tempStyles = Array.from(document.querySelectorAll(\"[data-meta='Unthemed']\"))\n      let i=0;\n      while (i <(tempStyles.length-1)) {\n        tempStyles[i].remove()\n        i++\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n        <StyledContainer>\n          <SVG \n            innerRef={svgRef}\n            src={`${process.env.PUBLIC_URL}/assets/focus-test.svg`}\n            onLoad={onSvgLoad}\n          ></SVG>\n        </StyledContainer>\n        { isLoaded &&\n        <div className=\"container\">\n          <div className=\"colors\">\n            <h3>Color</h3>\n            {\n              Object.keys(colors).map((key,index)=>{\n                if (key.startsWith('color')) {\n                  return (\n                    <label key={index}>\n                        {key}\n                        <input type=\"color\" value={colors[key]} onChange={(e)=>onColorChange(e,key)}></input>\n                    </label>\n                  )\n                }\n              })\n            }\n            <button onClick={resetColorMap}>Reset Colors</button>\n          </div>\n          <div className=\"stroke\">\n            <h3>Stroke</h3>\n            {\n              Object.keys(strokes).map((key,index)=>{\n                if (key==\"stroke-width\") {\n                  return (\n                    <label key={index}>\n                        {key}\n                        <input type=\"number\" step=\"2\" value={strokes[key]} onChange={(e)=>onStrokeChange(e,key)}></input>\n                    </label>\n                  )\n                }\n              })\n            }\n            <button onClick={resetStrokeMap}>Reset Stroke</button>\n          </div>\n          <div className=\"fonts\">\n            <h3>Font</h3>\n            {\n              Object.keys(fonts).map((key,index)=>{\n                if (key==\"font-size\") {\n                  return (\n                    <label key={index}>\n                        {key}\n                        <input type=\"number\" value={fonts[key]} onChange={(e)=>onFontChange(e,key)}></input>\n                    </label>\n                  )\n                } else if (key==\"font-family\") {\n                  return (\n                    <label key={index}>\n                    {key}\n                      <select onChange={(e)=>onFontChange(e, key)}>\n                          {\n                            availableFonts.map((font)=>{\n                                return (<option>{font}</option>)\n                            })\n                          }\n                      </select>\n                    </label>\n                  )\n\n                }\n              })\n            }\n            <button onClick={resetFontMap}>Reset Fonts</button>\n          </div>\n        </div>\n        }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}